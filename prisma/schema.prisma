generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Deck {
  id          String          @id @default(cuid())
  name        String
  imageSvg    String?         @db.LongText
  cards       Card[]
  users       UserOnDecks[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  answers     Answer[]
}

model Card {
  id          String     @id @default(cuid())
  question    String
  answer      String
  deck        Deck       @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId      String
  imageSvg    String?    @db.LongText
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  answers     Answer[]
}

model UserOnDecks {
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  deck        Deck       @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId      String
  assignedAt  DateTime   @default(now())

  @@id([userId, deckId])
}

model Answer {
  id          String     @id @default(cuid())
  deck        Deck       @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  card        Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId      String
  assignedAt  DateTime   @default(now())
  isCorrect   Boolean
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  decks         UserOnDecks[]
  answers       Answer[]
  accounts      Account[]
}