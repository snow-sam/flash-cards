generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Baralho {
  id          String     @id @default(cuid())
  nome        String
  imageSvg    String?    @db.LongText
  cartas      Carta[]
  usuarios    UsuariosOnBaralhos[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  respostas   Resposta[]
}

model Carta {
  id          String     @id @default(cuid())
  pergunta    String
  resposta    String
  baralho     Baralho    @relation(fields: [baralhoId], references: [id], onDelete: Cascade)
  baralhoId   String
  imageSvg    String?    @db.LongText
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  respostas   Resposta[]
}

model Usuario {
  id          String     @id @default(cuid())
  email       String     @unique
  baralhos    UsuariosOnBaralhos[]
  respostas   Resposta[]
}

model UsuariosOnBaralhos {
  usuario     Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId   String
  baralho     Baralho    @relation(fields: [baralhoId], references: [id], onDelete: Cascade)
  baralhoId   String
  assignedAt  DateTime   @default(now())

  @@id([usuarioId, baralhoId])
}

model Resposta {
  id          String     @id @default(cuid())
  baralho     Baralho    @relation(fields: [baralhoId], references: [id], onDelete: Cascade)
  baralhoId   String
  usuario     Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId   String
  carta       Carta      @relation(fields: [cartaId], references: [id], onDelete: Cascade)
  cartaId     String
  assignedAt  DateTime   @default(now())
  correct     Boolean
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
}